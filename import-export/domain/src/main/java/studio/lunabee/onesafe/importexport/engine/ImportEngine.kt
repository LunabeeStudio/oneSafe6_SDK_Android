/*
 * Copyright (c) 2023 Lunabee Studio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by Lunabee Studio / Date - 4/7/2023 - for the oneSafe6 SDK.
 * Last modified 4/7/23, 12:24 AM
 */

package studio.lunabee.onesafe.importexport.engine

import com.lunabee.lbcore.model.LBFlowResult
import com.lunabee.lbcore.model.LBResult
import kotlinx.coroutines.flow.Flow
import studio.lunabee.onesafe.domain.model.importexport.ImportMetadata
import studio.lunabee.onesafe.domain.model.importexport.ImportMode
import java.io.File

interface ImportEngine {
    /**
     * Get metadata from metadata file extracted from archive.
     * @param archiveExtractedDirectory archive content already extracted
     */
    suspend fun getMetadata(archiveExtractedDirectory: File): ImportMetadata

    /**
     * Get metadata from [studio.lunabee.onesafe.importexport.ImportCacheDataSource].
     */
    fun getMetadataFromCache(): LBResult<ImportMetadata>

    /**
     * Import data from an archive generated by the "new" OneSafe application.
     * @param archiveExtractedDirectory directory where extracted content is stored.
     * @param password current password used when generating the archive
     */
    fun authenticateAndExtractData(archiveExtractedDirectory: File, password: CharArray): Flow<LBFlowResult<Unit>>

    /**
     * Replace all ids and re-encrypt all content with the current user credentials.
     * @param archiveExtractedDirectory directory where extracted content is stored.
     */
    fun prepareDataForImport(archiveExtractedDirectory: File): Flow<LBFlowResult<Unit>>

    /**
     * Save data depending on the [ImportMode] chosen by user.
     * @param mode [ImportMode]
     */
    fun saveImportData(mode: ImportMode): Flow<LBFlowResult<Unit>>
}
